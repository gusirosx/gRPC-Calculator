package main

import (
	"context"
	pb "gRPC-Calculator/proto"
	"log"
	"net"

	"google.golang.org/grpc"
	"google.golang.org/grpc/reflection"
)

// server is used to implement the functions registered in the proto file.
type server struct {
	/* This structure must be the first thing to be created so that it
	   can implement the interface that was generated by protobuf */
	pb.UnimplementedAddServiceServer
}

// Add implements proto.AddService
func (s *server) Add(ctx context.Context, request *pb.Request) (*pb.Response, error) {
	a, b := request.GetA(), request.GetB()
	result := a + b
	return &pb.Response{Result: result}, nil
}

// Multiply implements proto.AddService
func (s *server) Multiply(ctx context.Context, request *pb.Request) (*pb.Response, error) {
	a, b := request.GetA(), request.GetB()
	result := a * b
	return &pb.Response{Result: result}, nil
}

func main() {
	//Begin listening on the port specified
	lis, err := net.Listen("tcp", ":50050")
	if err != nil {
		log.Fatalf("failed to listen on port 50050: %v", err)
	}
	srv := grpc.NewServer()
	pb.RegisterAddServiceServer(srv, &server{})
	log.Printf("server listening at %v", lis.Addr())
	// Register reflection service on gRPC server.
	reflection.Register(srv)
	if err := srv.Serve(lis); err != nil {
		log.Fatalf("failed to serve: %v", err)
	}
}
